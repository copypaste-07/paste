#Divide and Conquer:
#Implement a program to find minimum and maximum elements from a given list
#using Divide and Conquer strategy.
#include <iostream> 
using namespace std; 
// Structure to store minimum and maximum values 
struct MinMax { 
int min; 
int max; 
}; 
// Function to find min and max using Divide and Conquer 
MinMax findMinMax(int arr[], int low, int high) { 
MinMax result, left, right; 
// Base Case: Only one element 
if (low == high) { 
result.min = result.max = arr[low]; 
return result; 
} 
// Base Case: Two elements 
if (high == low + 1) { 
if (arr[low] > arr[high]) { 
result.max = arr[low]; 
result.min = arr[high]; 
} else { 
result.max = arr[high]; 
result.min = arr[low]; 
} 
return result; 
} 
// Divide: Find middle index 
int mid = (low + high) / 2; 
// Conquer: Recursively find min and max in both halves 
left = findMinMax(arr, low, mid); 
right = findMinMax(arr, mid + 1, high); 
// Combine: Get final min and max 
result.min = (left.min < right.min) ? left.min : right.min; 
result.max = (left.max > right.max) ? left.max : right.max; 
return result; 
} 
int main() { 
int n; 
// Input array size 
cout << "Enter number of elements: "; 
cin >> n; 
int arr[n]; 
// Input array elements 
cout << "Enter " << n << " elements: "; 
for (int i = 0; i < n; i++) { 
cin >> arr[i]; 
} 
// Find min and max using Divide and Conquer 
MinMax result = findMinMax(arr, 0, n - 1); 
// Output results 
cout << "Minimum element: " << result.min << endl; 
cout << "Maximum element: " << result.max << endl; 
return 0; 
}
