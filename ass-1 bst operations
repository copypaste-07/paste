

Create a binary search tree (BST) of and perform following operations: i) Insert ii)
Display inorder iii)Search a node iv) Find height of the tree v) level wise display iv)
Delete v) Mirror


#include <iostream>
#include <queue>
using namespace std;

class Node {
public:
    int data;
    Node *left, *right;
    
    Node(int data) {
        this->data = data;
        this->left = NULL;
        this->right = NULL;
    }
};

// Insert a node into BST
Node* insertAtBst(Node* root, int data) {
    if (root == NULL) {
        return new Node(data);
    }
    if (data > root->data) {
        root->right = insertAtBst(root->right, data);
    } else {
        root->left = insertAtBst(root->left, data);
    }
    return root;
}

// Inorder Traversal (Left - Root - Right)
void inorder(Node* root) {
    if (root == NULL) return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

// Search a Node in BST
bool search(Node* root, int key) {
    if (root == NULL) return false;
    if (root->data == key) return true;
    return key < root->data ? search(root->left, key) : search(root->right, key);
}

// Find Height of the Tree
int height(Node* root) {
    if (root == NULL) return 0;
    return 1 + max(height(root->left), height(root->right));
}

// Level Order Traversal
void levelOrderTraversal(Node* root) {
    if (root == NULL) return;
    queue<Node*> q;
    q.push(root);
    while (!q.empty()) {
        Node* temp = q.front();
        q.pop();
        cout << temp->data << " ";
        if (temp->left) q.push(temp->left);
        if (temp->right) q.push(temp->right);
    }
}

// Delete a Node from BST
Node* deleteNode(Node* root, int key) {
    if (root == NULL) return root;
    if (key < root->data) {
        root->left = deleteNode(root->left, key);
    } else if (key > root->data) {
        root->right = deleteNode(root->right, key);
    } else {
        if (root->left == NULL) {
            Node* temp = root->right;
            delete root;
            return temp;
        } else if (root->right == NULL) {
            Node* temp = root->left;
            delete root;
            return temp;
        }
        Node* temp = root->right;
        while (temp->left) temp = temp->left;
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

// Convert BST to its Mirror Image
void mirror(Node* root) {
    if (root == NULL) return;
    swap(root->left, root->right);
    mirror(root->left);
    mirror(root->right);
}

int main() {
    Node* root = NULL;
    int choice, value;
    
    while (true) {
        cout << "\n1. Insert\n2. Display Inorder\n3. Search\n4. Find Height\n5. Level-wise Display\n6. Delete Node\n7. Mirror Tree\n8. Exit\nEnter choice: ";
        cin >> choice;
        
        switch (choice) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> value;
                root = insertAtBst(root, value);
                break;
            case 2:
                cout << "Inorder Traversal: ";
                inorder(root);
                cout << endl;
                break;
            case 3:
                cout << "Enter value to search: ";
                cin >> value;
                cout << (search(root, value) ? "Found" : "Not Found") << endl;
                break;
            case 4:
                cout << "Height of tree: " << height(root) << endl;
                break;
            case 5:
                cout << "Level-wise Display: ";
                levelOrderTraversal(root);
                cout << endl;
                break;
            case 6:
                cout << "Enter value to delete: ";
                cin >> value;
                root = deleteNode(root, value);
                break;
            case 7:
                mirror(root);
                cout << "Tree mirrored." << endl;
                break;
            case 8:
                return 0;
            default:
                cout << "Invalid choice!" << endl;
        }
    }
}




