#Backtracking:
#a) Solve Graph Coloring problem using backtracking approaches.

#include <iostream>
using namespace std;
const int MAX = 20;
bool isSafe(int node, int graph[MAX][MAX], int color[], int n, int c) {
for (int i = 0; i < n; i++) {
if (graph[node][i] && color[i] == c)
return false;
}
return true;
}
bool solveGraphColoring(int node, int graph[MAX][MAX], int color[], int m, int n) {
if (node == n)
return true;
for (int c = 1; c <= m; c++) {
if (isSafe(node, graph, color, n, c)) {
color[node] = c;
if (solveGraphColoring(node + 1, graph, color, m, n))
return true;
color[node] = 0;
}
}
return false;
}
void graphColoring() {
int n, m;
int graph[MAX][MAX];
int color[MAX] = {0};
cout << "Enter number of vertices: ";
cin >> n;
cout << "Enter number of colors: ";
cin >> m;
cout << "Enter adjacency matrix:\n";
for (int i = 0; i < n; i++)
for (int j = 0; j < n; j++)
cin >> graph[i][j];
if (solveGraphColoring(0, graph, color, m, n)) {
cout << "Coloring of graph:\n";
for (int i = 0; i < n; i++)
cout << "Vertex " << i << " ---> Color " << color[i] << "\n";
} else {
cout << "No solution exists!\n";
}
}
int main() {
graphColoring();
return 0;
}
#2. b) N-Queens Problem: Write a recursive program to find the solution of placing N-
queens on a chess board so that no queen takes each other.
#include <iostream> 
using namespace std; 
int solutions = 0; 
const int MAX = 10; 
char board[MAX][MAX]; 
bool isSafe(int row, int col, int n) { 
// Check column 
for (int i = 0; i < row; i++) 
if (board[i][col] == 'Q') return false; 
// Check upper-left diagonal 
for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) 
if (board[i][j] == 'Q') return false; 
// Check upper-right diagonal 
for (int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) 
if (board[i][j] == 'Q') return false; 
return true; 
} 
void solveNQueens(int row, int n) { 
if (row == n) { 
solutions++; 
cout << "Solution " << solutions << ":\n"; 
for (int i = 0; i < n; i++) { 
for (int j = 0; j < n; j++) 
cout << board[i][j]; 
cout << "\n"; 
} 
cout << "\n"; 
return; 
} 
for (int col = 0; col < n; col++) { 
if (isSafe(row, col, n)) { 
board[row][col] = 'Q'; 
solveNQueens(row + 1, n); 
board[row][col] = '.'; // backtrack 
} 
} 
} 
void nQueens() { 
int n; 
cout << "Enter number of queens (N): "; 
cin >> n; 
solutions = 0; 
for (int i = 0; i < n; i++) 
for (int j = 0; j < n; j++) 
board[i][j] = '.'; 
solveNQueens(0, n); 
if (solutions == 0) 
cout << "No solution exists!\n"; 
else 
cout << "Total solutions: " << solutions << "\n"; 
} 
int main() { 
nQueens(); 
return 0; 
}
