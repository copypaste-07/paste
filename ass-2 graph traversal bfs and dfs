#bfs
#include <iostream>
#include <stack>
#include <queue>
#include <vector>
# include <unordered_map>
#include <list>
using namespace std;
class graph{
    public:
    int V;
    unordered_map<int,list<int>> adj;

    void addEdge(int u,int v,int direction){
        adj[u].push_back(v);
        if(direction==0){
            adj[v].push_back(u);
            cout<<u<<endl;
            cout<<v<<endl;
        }
    }
    void displayGraph(){
        for(auto i:adj){
            cout<<i.first<<"->";
            for(auto j:i.second){
                cout<<j<<", ";
            }
            cout<<endl;
        }
    }

    void BFS(int startNode){
        unordered_map<int,bool> visited;
        queue<int> q;
        q.push(startNode);
        visited[startNode]=1;
        cout<<"BFS TRAVERSAL:"<<endl;
        while(!q.empty()){
            int node=q.front();
            q.pop();
            cout<<node<<" ";

            // visits all neighbour;
            for(auto neighbour:adj[node]){
                if(!visited[neighbour]){
                    q.push(neighbour);
                    visited[neighbour] = true;
                }
            }
        }
        cout << endl;
    }

};
// 0 1 1 2 2 3 3 1 3 4 0 4
int main(){
    int n;
    cout<<"Enter the no of nodes:"<<endl;
    cin>>n;
    int m ;
    cout<<"Enter the no of edges:"<<endl;
    cin>>m;
    graph g;
    for(int i=0;i<m;i++){
        int u,v;
        cin>>u>>v;
        g.addEdge(u,v,0);
    }
    g.displayGraph();
    int startNode;
    cout << "Enter the starting node for BFS: ";
    cin >> startNode;
    g.BFS(startNode);


    return 0;
}





#DFS Traversal
#include <iostream>
#include <stack>
#include <queue>
#include <vector>
#include <unordered_map>
#include <list>
using namespace std;

class Graph {
public:
    int V;
    unordered_map<int, list<int>> adj;

    // Function to add an edge
    void addEdge(int u, int v, int direction) {
        adj[u].push_back(v);
        if (direction == 0) {
            adj[v].push_back(u);
        }
    }

    // Function to display adjacency list
    void displayGraph() {
        for (auto i : adj) {
            cout << i.first << " -> ";
            for (auto j : i.second) {
                cout << j << " ";
            }
            cout << endl;
        }
    }

    // DFS helper function
    void dfs(int node, unordered_map<int, bool> &visited, vector<int> &component) {
        component.push_back(node);
        visited[node] = true;
        for (auto i : adj[node]) {
            if (!visited[i]) {
                dfs(i, visited, component);
            }
        }
    }

    // Function to perform DFS traversal and return connected components
    vector<vector<int>> depthFirstSearch(int V) {
        vector<vector<int>> ans;
        unordered_map<int, bool> visited;

        for (auto i : adj) {
            int node = i.first;
            if (!visited[node]) {
                vector<int> component;
                dfs(node, visited, component);
                ans.push_back(component);
            }
        }
        return ans;
    }
};
// 0 1 1 2 2 3 3 1 3 4 0 4
int main() {
    Graph g;
    int n, m;
    cout << "Enter the number of nodes: ";
    cin >> n;
    cout << "Enter the number of edges: ";
    cin >> m;

    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        g.addEdge(u, v, 0);  // 0 for an undirected graph
    }

    g.displayGraph();

    // Perform DFS and display connected components
    vector<vector<int>> components = g.depthFirstSearch(n);
    cout << "\nConnected Components:" << endl;
    for (auto component : components) {
        for (auto node : component) {
            cout << node << " ";
        }
        cout << endl;
    }

    return 0;
}


